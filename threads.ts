; (global as any).WebSocket = require('isomorphic-ws')
import { KeyInfo, ThreadID, Client } from '@textile/hub'
import { Database, Collection, JSONSchema } from "@textile/threads-database"
import { Libp2pCryptoIdentity } from '@textile/threads-core'
import { config } from 'dotenv'

// Load your .env into process.env
config()

interface Message {
    _id: string
    author: string
    text: string
}

const messageSchema: JSONSchema = {
    $schema: 'http://json-schema.org/draft-07/schema#',
    definitions: {
        ChatBasic: {
            title: 'ChatBasic',
            type: 'object',
            properties: {
                _id: {
                    type: 'string',
                },
                text: {
                    type: 'string',
                },
                author: {
                    type: 'string',
                },
            },
            required: ['text', 'author', '_id'],
        },
    },
}

const addListener = async (db: Database, name: string) => {
    const filter = `${name}.*.0` // filter to our chat room collection
    db.emitter.on(filter, (values: any, type: any) => {
        //console.log(values)
        const message: Message = values.event.patch;
        console.log(message)
    })
}

const send = async (collection: Collection<Message>, text: string, author: string) => {
    const message: Message = {
        _id: '',
        author: author,
        text: text,
    }
    await collection.insert(message)
}

const example = async () => {
    // DEV: KEY and SECRET should be part of production env
    const keyInfo: KeyInfo = {
        // Using insecure keys
        key: process.env.USER_API_KEY,
        secret: '',
        // @ts-ignore
        type: 1,
    }
    // DEV: ThreadID needs to be persisted and be part of production env
    const threadID = ThreadID.fromString('bafk6ijfdz5eibe47pnqmsl5q55hkzmtvsi4d5q5xxnlb7uqcwdy6n3i')
    const db = await Database.withKeyInfo(keyInfo, `build/${threadID.toString()}`)
    // DEV: Identity needs to be generated by a PKI provider like MetaMask (deterministic)
    const identity = await Libp2pCryptoIdentity.fromRandom()
    const thread = await db.start(identity, { threadID: db.threadID })

    // const db = await new Client();

    // DEV: It's all regular MongoDB from this point onwards
    const roomName = 'room101';

    await addListener(db, roomName)

    const chat = await db.collections.get(roomName) || await db.newCollection(roomName, messageSchema);

    setTimeout(() => {
        send(chat, 'hello', 'Ahmed')
    }, 2000)
}

example()